name: Enterprise Escrow Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  SOLIDITY_VERSION: '0.8.20'

jobs:
  security-audit:
    name: Security Audit & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Compile Contracts
        run: npx hardhat compile

      - name: Run Solhint Security Analysis
        run: |
          npx solhint 'contracts/**/*.sol'
          echo "‚úÖ Static analysis completed"

      - name: Run Security Analysis
        run: |
          node security-analysis.js
          echo "‚úÖ Security audit completed"

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: security-analysis-report.json

  comprehensive-testing:
    name: Comprehensive Test Suite (96 Tests)
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Compile Contracts
        run: npx hardhat compile

      - name: Run Basic Test Suite
        run: |
          echo "üß™ Running basic validation tests..."
          npx hardhat test test-minimal.js --config hardhat.config.minimal.js

      - name: Run Comprehensive Test Suite (96 Tests)
        run: |
          echo "üß™ Running comprehensive enterprise test suite..."
          npx hardhat test enterprise-test-suite.js --config hardhat.config.minimal.js

      - name: Generate Test Coverage Report
        run: |
          echo "üìä Generating test coverage report..."
          npx hardhat coverage --config hardhat.config.minimal.js || true

      - name: Validate Test Results
        run: |
          echo "‚úÖ All 96 tests must pass for deployment approval"
          echo "‚úÖ Security tests validated"
          echo "‚úÖ Integration tests validated"
          echo "‚úÖ Edge case tests validated"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.json

  testnet-deployment:
    name: Deploy to Mumbai Testnet
    runs-on: ubuntu-latest
    needs: [security-audit, comprehensive-testing]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    environment: testnet
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Deploy to Mumbai Testnet
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          POLYGON_RPC_URL: ${{ secrets.MUMBAI_RPC_URL }}
          PLATFORM_WALLET: ${{ secrets.TESTNET_PLATFORM_WALLET }}
          DEFAULT_AGENT: ${{ secrets.TESTNET_DEFAULT_AGENT }}
          DEFAULT_ARBITER: ${{ secrets.TESTNET_DEFAULT_ARBITER }}
        run: |
          echo "üöÄ Deploying to Mumbai testnet..."
          npx hardhat run scripts/deploy-production.js --network mumbai

      - name: Verify Contracts on Mumbai
        run: |
          echo "üîç Verifying contracts on Mumbai..."
          node scripts/verify-contracts.js --network mumbai

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: testnet-deployment
          path: |
            deployments/latest-mumbai.json
            deployments/deployment-mumbai-*.json

  mainnet-deployment:
    name: Deploy to Polygon Mainnet
    runs-on: ubuntu-latest
    needs: [testnet-deployment]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Pre-Mainnet Security Check
        run: |
          echo "üîí Final security validation before mainnet..."
          node security-analysis.js
          npx hardhat test enterprise-test-suite.js --config hardhat.config.minimal.js

      - name: Deploy to Polygon Mainnet
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
          PLATFORM_WALLET: ${{ secrets.MAINNET_PLATFORM_WALLET }}
          DEFAULT_AGENT: ${{ secrets.MAINNET_DEFAULT_AGENT }}
          DEFAULT_ARBITER: ${{ secrets.MAINNET_DEFAULT_ARBITER }}
          MAINNET_DEPLOYMENT_CONFIRMED: ${{ secrets.MAINNET_DEPLOYMENT_CONFIRMED }}
        run: |
          echo "üöÄ MAINNET DEPLOYMENT STARTING..."
          echo "‚ö†Ô∏è This deployment uses real funds!"
          npx hardhat run scripts/deploy-production.js --network polygon

      - name: Verify Contracts on Mainnet
        run: |
          echo "üîç Verifying contracts on Polygon mainnet..."
          node scripts/verify-contracts.js --network polygon

      - name: Setup Production Monitoring
        run: |
          echo "üìä Setting up production monitoring..."
          node scripts/setup-monitoring.js --network polygon

      - name: Upload Production Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mainnet-deployment
          path: |
            deployments/latest-polygon.json
            deployments/deployment-polygon-*.json